// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// The response message containing the greetings
type NothingReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *NothingReply) Reset()                    { *m = NothingReply{} }
func (m *NothingReply) String() string            { return proto.CompactTextString(m) }
func (*NothingReply) ProtoMessage()               {}
func (*NothingReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// The request message containing the user's name.
type RememberRequest struct {
	Thing string `protobuf:"bytes,1,opt,name=thing" json:"thing,omitempty"`
}

func (m *RememberRequest) Reset()                    { *m = RememberRequest{} }
func (m *RememberRequest) String() string            { return proto.CompactTextString(m) }
func (*RememberRequest) ProtoMessage()               {}
func (*RememberRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// The request message containing the user's name.
type AskRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AskRequest) Reset()                    { *m = AskRequest{} }
func (m *AskRequest) String() string            { return proto.CompactTextString(m) }
func (*AskRequest) ProtoMessage()               {}
func (*AskRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

// The request message containing the user's name.
type AskResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AskResponse) Reset()                    { *m = AskResponse{} }
func (m *AskResponse) String() string            { return proto.CompactTextString(m) }
func (*AskResponse) ProtoMessage()               {}
func (*AskResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterType((*NothingReply)(nil), "helloworld.NothingReply")
	proto.RegisterType((*RememberRequest)(nil), "helloworld.RememberRequest")
	proto.RegisterType((*AskRequest)(nil), "helloworld.AskRequest")
	proto.RegisterType((*AskResponse)(nil), "helloworld.AskResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayNothing(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*NothingReply, error)
	RememberSomething(ctx context.Context, in *RememberRequest, opts ...grpc.CallOption) (*NothingReply, error)
	AskSomething(ctx context.Context, in *RememberRequest, opts ...grpc.CallOption) (*AskResponse, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayNothing(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*NothingReply, error) {
	out := new(NothingReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayNothing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) RememberSomething(ctx context.Context, in *RememberRequest, opts ...grpc.CallOption) (*NothingReply, error) {
	out := new(NothingReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/RememberSomething", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) AskSomething(ctx context.Context, in *RememberRequest, opts ...grpc.CallOption) (*AskResponse, error) {
	out := new(AskResponse)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/AskSomething", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayNothing(context.Context, *HelloRequest) (*NothingReply, error)
	RememberSomething(context.Context, *RememberRequest) (*NothingReply, error)
	AskSomething(context.Context, *RememberRequest) (*AskResponse, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayNothing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayNothing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayNothing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayNothing(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_RememberSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RememberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).RememberSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/RememberSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).RememberSomething(ctx, req.(*RememberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_AskSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RememberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).AskSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/AskSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).AskSomething(ctx, req.(*RememberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "SayNothing",
			Handler:    _Greeter_SayNothing_Handler,
		},
		{
			MethodName: "RememberSomething",
			Handler:    _Greeter_RememberSomething_Handler,
		},
		{
			MethodName: "AskSomething",
			Handler:    _Greeter_AskSomething_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x29, 0x71, 0xf1, 0x78, 0x80, 0x78, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42,
	0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92,
	0x1a, 0x17, 0x17, 0x54, 0x4d, 0x41, 0x4e, 0xa5, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71,
	0x62, 0x3a, 0x4c, 0x11, 0x8c, 0xab, 0xa4, 0xc1, 0xc5, 0xe3, 0x97, 0x5f, 0x92, 0x91, 0x99, 0x97,
	0x4e, 0x48, 0xa5, 0x3a, 0x17, 0x7f, 0x50, 0x6a, 0x6e, 0x6a, 0x6e, 0x52, 0x6a, 0x11, 0xcc, 0x62,
	0x11, 0x2e, 0x56, 0xb0, 0x56, 0xa8, 0x52, 0x08, 0x07, 0x64, 0xb5, 0x63, 0x71, 0x36, 0x4c, 0x0d,
	0x3e, 0x03, 0xb9, 0xc1, 0xea, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x71, 0x2b, 0x34, 0x5a, 0xcc,
	0xc4, 0xc5, 0xee, 0x5e, 0x94, 0x9a, 0x5a, 0x92, 0x5a, 0x24, 0x64, 0xc7, 0xc5, 0x11, 0x9c, 0x58,
	0x09, 0xf6, 0x9a, 0x90, 0x84, 0x1e, 0x52, 0x30, 0x21, 0x87, 0x88, 0x94, 0x18, 0x16, 0x19, 0xa0,
	0xef, 0x94, 0x18, 0x84, 0x9c, 0xb8, 0xb8, 0x80, 0xfa, 0xa1, 0x5e, 0xc6, 0x63, 0x02, 0x8a, 0x0c,
	0x72, 0x08, 0x01, 0xcd, 0xf0, 0xe1, 0x12, 0x84, 0x85, 0x44, 0x70, 0x7e, 0x6e, 0x2a, 0xc4, 0x28,
	0x69, 0x64, 0x0d, 0x68, 0x01, 0x85, 0xd7, 0x34, 0x37, 0x2e, 0x1e, 0x60, 0x30, 0x10, 0x69, 0x90,
	0x38, 0xb2, 0x24, 0x52, 0xe8, 0x29, 0x31, 0x24, 0xb1, 0x81, 0x13, 0x8a, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x59, 0x11, 0xc7, 0x30, 0x3c, 0x02, 0x00, 0x00,
}
